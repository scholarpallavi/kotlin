package test

public open class ModalityOfFakeOverrides : java.util.AbstractList<kotlin.String> {
    public constructor ModalityOfFakeOverrides()
    protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
    public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: kotlin.String): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.String>): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Collection<kotlin.String>): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
    public open override /*1*/ fun get(/*0*/ p0: kotlin.Int): kotlin.String
    public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ p0: kotlin.Any?): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.String>
    public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ p0: kotlin.Any?): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<kotlin.String>
    public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ p0: kotlin.Int): kotlin.MutableListIterator<kotlin.String>
    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: kotlin.Int): kotlin.String
    public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String): kotlin.String
    public open override /*1*/ fun size(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun subList(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.MutableList<kotlin.String>
    public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
    public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>): kotlin.Array<T>
}
